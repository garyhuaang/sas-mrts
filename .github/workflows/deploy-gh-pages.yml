name: Deploy Store to GitHub Pages

on:
  push:
    branches:
      - main # Or your default branch, e.g., master
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your project's Node.js version
          cache: 'npm' # Or 'yarn' if you use yarn

      - run: npm ci --legacy-peer-deps
      - uses: nrwl/nx-set-shas@v4

      - name: Check Git History
        run: |
          git --version
          git status
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Fetching all tags and branches just in case..."
          git fetch --all --tags --unshallow || git fetch --all --tags # Fallback if unshallow fails
          echo "Last 20 commits in the current checkout:"
          git log -n 20 --oneline --graph --decorate
          echo "Checking if NX_BASE commit (${NX_BASE}) exists:"
          git cat-file -e "${NX_BASE}" && echo "NX_BASE commit exists" || echo "NX_BASE commit DOES NOT EXIST"
          echo "Checking if NX_HEAD commit (${NX_HEAD}) exists:"
          git cat-file -e "${NX_HEAD}" && echo "NX_HEAD commit exists" || echo "NX_HEAD commit DOES NOT EXIST"

      - name: Set no-cloud environment
        run: |
          echo "NX_CLOUD_ACCESS_TOKEN=" >> $GITHUB_ENV
          echo "NX_CLOUD_AUTH_TOKEN=" >> $GITHUB_ENV
          echo "NX_NO_CLOUD=true" >> $GITHUB_ENV

      # Use manual command instead of the action
      - name: Set Git SHAs for affected commands
        run: |
          echo "BASE_SHA=$(git merge-base origin/main HEAD)" >> $GITHUB_ENV
          echo "HEAD_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Reset Nx Cache
        run: npx nx reset

      - name: Sync Nx Cache - Local
        run: npx nx sync --local

      - run: npx nx affected -t lint test build --no-cloud

      - run: npx nx dep-graph --file=dist/graph.html --no-cloud

      - run: npx nx affected --target=build --no-cloud

      - run: npx nx show projects --affected --base=${{ env.BASE_SHA }} --head=${{ env.HEAD_SHA }} --type=app --no-cloud

      - run: npx nx affected --base=${{ env.BASE_SHA }} --head=${{ env.HEAD_SHA }} --target=deploy --no-cloud

      - run: npm run build

      - name: Generate timestamp
        run: |
          echo "timestamp=$(date +%s)" >> "$GITHUB_ENV"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ env.timestamp }}
          path: apps/store/dist

      - name: Upload Dependency Graph Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-graph-${{ env.timestamp }}
          path: dist/**/*

      - name: Build Store application
        run: npx nx build store --verbose
        env:
          NX_SKIP_NX_CLOUD: true
          VITE_STRIPE_PUBLISH_KEY: ${{ secrets.VITE_STRIPE_PUBLISH_KEY }}
          # NX_CLOUD_ACCESS_TOKEN will be automatically used if it's in GitHub secrets
          # Add any other build-time VITE_ environment variables here

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./apps/store/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
